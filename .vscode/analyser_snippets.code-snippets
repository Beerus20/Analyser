{
	// Place your espace de travail Analyser snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"cpp header": {
		"prefix": "cpph",
		"body": [
			"#ifndef __${1:${TM_FILENAME/([^\\.\\-]*)([\\.\\-])*/${1:/upcase}${2:+_}/g}}__",
			"# define __${1}__",
			"",
			"# include <iostream>",
			"",
			"#endif"
		],
		"description": "simple cpp header"
	},
	"cpp class header": {
		"prefix": "cpphc",
		"body": [
			"#ifndef __${1:${TM_FILENAME/([^\\.\\-]*)([\\.\\-])*/${1:/upcase}${2:+_}/g}}__",
			"# define __${1}__",
			"",
			"# include <iostream>",
			"",
			"class ${2:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}",
			"{",
			"\tprivate:",
			"\tpublic:",
			"\t\t${2}(void);",
			"\t\t${2}(const ${2} &other);",
			"\t\tvirtual ~${2}(void);",
			"\t\t${2}\t&operator=(const ${2} &other);",
			"};",
			"",
			"std::ostream\t&operator<<(std::ostream &os, const ${2} &to_show);",
			"",
			"#endif"
		],
		"description": "cpp class header"
	},
	"cpp class with move semantic header": {
		"prefix": "cpphcms",
		"body": [
			"#ifndef __${1:${TM_FILENAME/([^\\.\\-]*)([\\.\\-])*/${1:/upcase}${2:+_}/g}}__",
			"# define __${1}__",
			"",
			"# include <iostream>",
			"",
			"class ${2:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}",
			"{",
			"\tprivate:",
			"\t\t${2}(void);",
			"\t\t${2}(const ${2} &other);",
			"\t\t${2}(const ${2} &&other);",
			"\t\t${2}\t&operator=(const ${2} &other);",
			"\t\t${2}\t&operator=(const ${2} &&other);",
			"",
			"\tpublic:",
			"\t\tvirtual ~${2}(void);",
			"};",
			"",
			"#endif"
		],
		"description": "cpp class with move semantic header"
	},
	"cpp private class header": {
		"prefix": "cpphpc",
		"body": [
			"#ifndef __${1:${TM_FILENAME/([^\\.\\-]*)([\\.\\-])*/${1:/upcase}${2:+_}/g}}__",
			"# define __${1}__",
			"",
			"# include <iostream>",
			"",
			"class ${2:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}",
			"{",
			"\tprivate:",
			"\t\t${2}(void);",
			"\t\t${2}(const ${2} &other);",
			"\t\t${2}\t&operator=(const ${2} &other);",
			"",
			"\tpublic:",
			"\t\tvirtual ~${2}(void);",
			"};",
			"",
			"#endif"
		],
		"description": "cpp private class header"
	},
	"cpp class": {
		"prefix": "cppc",
		"body": [
			"#include \"${TM_FILENAME_BASE}.hpp\"",
			"",
			"${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}::${1}(void) {}",
			"${1}::${1}(const ${1} &) {}",
			"${1}::~${1}(void) {}",
			"${1}\t&${1}::operator=(const ${1} &)",
			"{",
			"\treturn (*this);",
			"}",
			"",
			"std::ostream\t&operator<<(std::ostream &os, const ${1} &to_show)",
			"{",
			"\t(void)to_show;",
			"\tos << \"Print ${1} not configured\" << std::endl;",
			"\treturn (os);",
			"}",
			"",
		],
		"description": "cpp file"
	},
	"cpp class": {
		"prefix": "cppc",
		"body": [
			"#include \"${TM_FILENAME_BASE}.hpp\"",
			"",
			"${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}::${1}(void) {}",
			"${1}::${1}(const ${1} &) {}",
			"${1}::${1}(const ${1} &&) {}",
			"${1}::~${1}(void) {}",
			"${1}\t&${1}::operator=(const ${1} &)",
			"{",
			"\treturn (*this);",
			"}",
			"${1}\t&${1}::operator=(const ${1} &&)",
			"{",
			"\treturn (*this);",
			"}",
			"",
			"std::ostream\t&operator<<(std::ostream &os, const ${1} &to_show)",
			"{",
			"\t(void)to_show;",
			"\tos << \"Print ${1} not configured\" << std::endl;",
			"\treturn (os);",
			"}",
			"",
		],
		"description": "cpp file"
	},
	"cpp private class": {
		"prefix": "cppcp",
		"body": [
			"#include \"${TM_FILENAME_BASE}.hpp\"",
			"",
			"${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}::${1}(void) {}",
			"${1}::${1}(const ${1} &) {}",
			"${1}::~${1}(void) {}",
			"${1}\t&${1}::operator=(const ${1} &)",
			"{",
			"\treturn (*this);",
			"}",
			"",
		],
		"description": "cpp for private constructor"
	},
}